" LazyVim key mappings for Jetbrains IDEs.

" LazyVim default settings
" https://www.lazyvim.org/configuration/general

let mapleader=" "
let maplocalleader="\\"

" Confirm to save changes before exiting modified buffer
set formatoptions=jcroqlnt
" Print line number
set number
" Relative line numbers
set relativenumber
" Lines of context
set scrolloff=4
" Round indent
set shiftround
" Columns of context
set sidescrolloff=8
" which-key says to set this high, or set notimeout
set timeoutlen=10000
set notimeout
set undolevels=10000
" Disable line wrap
set nowrap

" Neovim settings that differ from Vim
" https://neovim.io/doc/user/diff.html
" https://github.com/mikeslattery/nvim-defaults.vim/blob/main/plugin/.vimrc

set backspace=indent,eol,start
set formatoptions=tcqj
set listchars=tab:>\ ,trail:-,nbsp:+
set shortmess=filnxtToOF

" Enable plugin behavior

" https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins
" https://www.lazyvim.org/plugins

" gcc and gc<action> mappings.
Plug 'tpope/vim-commentary'

" Emulate LazyVim mini.surround mappings
Plug 'tpope/vim-surround'
set g:surround_no_mappings = 1
nmap gsa <Plug>YSurround
xmap gsa <Plug>VSurround
nmap gsr <Plug>CSurround
nmap gsd <Plug>DSurround

" Use s to jump anywhere (similar to flash.nvim in LazyVim)
set easymotion
set g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-s)
xmap s <Plug>(easymotion-s)
omap s <Plug>(easymotion-s)

" Enable the whichkey plugin, available on Jetbrains marketplace
set which-key
" Extended matching.  A Neovim default plugin.
set matchit

" Key maps

" https://www.lazyvim.org/configuration/keymaps

" To track Action-IDs
" :action VimFindActionIdAction

" General Keymaps

" Go to Left Window
nmap <C-h> <C-w>h
" Go to Lower Window
nmap <C-j> <C-w>j
" Go to Upper Window
nmap <C-k> <C-w>k
" Go to Right Window
nmap <C-l> <C-w>l
" Increase Window Height
nmap <C-Up> <Action>(IncrementWindowHeight)
" Decrease Window Height
nmap <C-Down> <Action>(DecrementWindowHeight)
" Decrease Window Width
nmap <C-Left> <Action>(DecrementWindowWidth)
" Increase Window Width
nmap <C-Right> <Action>(IncrementWindowWidth)
" Move Down
nmap <A-j> <Action>(MoveLineDown)
imap <A-j> <Esc><Action>(MoveLineDown)i
" Move Up
nmap <A-k> <Action>(MoveLineUp)
imap <A-k> <Esc><Action>(MoveLineUp)i
" Prev Buffer
nmap <S-h> <Action>(PreviousTab)
" Next Buffer
nmap <S-l> <Action>(NextTab)
" Prev Buffer (alternative)
nmap [b <Action>(PreviousTab)
" Next Buffer (alternative)
nmap ]b <Action>(NextTab)
" Switch to Other Buffer
nnoremap <leader>bb <C-^>
" Switch to Other Buffer (alternative)
nnoremap <leader>` <C-^>
" Delete Buffer
nmap <leader>bd <Action>(CloseContent)
" Delete Buffer and Window
nmap <leader>bD <Action>(CloseContent)
" Delete Other Buffers
nmap <leader>bo <Action>(CloseAllEditorsButActive)
" Escape and Clear hlsearch
nmap <esc> :nohlsearch<CR>
nmap <leader>ur :nohlsearch<CR>
" Keywordprg
nmap <leader>K :help<space><C-r><C-w><CR>
" Add Comment Below
nmap gco o<c-o>gcc
" Add Comment Above
nmap gcO O<c-o>gcc
" Lazy
nmap <leader>l <Action>(WelcomeScreen.Plugins)
" New File
nmap <leader>fn <Action>(NewElementSamePlace)
" Location List
nmap <leader>xl <Action>(ActivateProblemsViewToolWindow)
" Quickfix List
nmap <leader>xq <Action>(ActivateProblemsViewToolWindow)
" Previous Quickfix
nmap [q <Action>(GotoPreviousError)
" Next Quickfix
nmap ]q <Action>(GotoNextError)
" Format
nmap <leader>cf <Action>(Format)
vmap <leader>cf <Action>(Format)
" Line Diagnostics
nmap <leader>cd <Action>(ActivateProblemsViewToolWindow)
" Next Diagnostic
nmap ]d <Action>(GotoNextError)
" Prev Diagnostic
nmap [d <Action>(GotoPreviousError)
" Next Error
nmap ]e <Action>(GotoNextError)
" Prev Error
nmap [e <Action>(GotoPreviousError)
" Next Warning
nmap ]w <Action>(GotoNextError)
" Prev Warning
nmap [w <Action>(GotoPreviousError)
" Toggle Auto Format (Global)
nmap <leader>ub :echo 'There is no equivalent mapping for Toggle Auto Format.'<cr>
" Toggle Auto Format (Buffer)
nmap <leader>uB :echo 'There is no equivalent mapping for Toggle Auto Format.'<cr>
" Toggle Spelling
nmap <leader>us :setlocal spell!<CR>
" Toggle Wrap
nmap <leader>uw :setlocal wrap!<CR>
" Toggle Relative Number
nmap <leader>uL :set relativenumber!<CR>
" Toggle Diagnostics
nmap <leader>ud <Action>(ActivateProblemsViewToolWindow)
" Toggle Line Numbers
nmap <leader>ul :set number!<CR>
" Toggle conceallevel
nmap <leader>uc :echo 'There is no equivalent mapping for Toggle Conceallevel.'<cr>
" Toggle Treesitter Highlight
nmap <leader>uT :echo 'There is no equivalent mapping for Toggle Treesitter Highlight.'<cr>
" Toggle Background
nmap <leader>ub <Action>(QuickChangeScheme)
" Toggle Inlay Hints
nmap <leader>uh <Action>(ToggleInlayHintsGloballyAction)
" Lazygit (Root Dir)
nmap <leader>gg <Action>(ActivateCommitToolWindow)
" Lazygit (cwd)
nmap <leader>gG <Action>(ActivateCommitToolWindow)
" Git Blame Line
nmap <leader>gb <Action>(Annotate)
" Git Browse
nmap <leader>gB <Action>(Vcs.Show.Log)
" Lazygit Current File History
nmap <leader>gf <Action>(Vcs.ShowTabbedFileHistory)
" Lazygit Log
nmap <leader>gl <Action>(Vcs.Show.Log)
" Lazygit Log (cwd)
nmap <leader>gL <Action>(Vcs.Show.Log)
" Quit All
nmap <leader>qq <Action>(Exit)
" Inspect Pos
nmap <leader>ui <Action>(ActivateStructureToolWindow)
" Inspect Tree
nmap <leader>uI <Action>(ActivateStructureToolWindow)
" LazyVim Changelog
nmap <leader>L <Action>(WhatsNewAction)
" Terminal (Root Dir)
nmap <leader>ft <Action>(ActivateTerminalToolWindow)
" Terminal (cwd)
nmap <leader>fT <Action>(ActivateTerminalToolWindow)
" Terminal (Root Dir)
nmap <C-/> <Action>(ActivateTerminalToolWindow)
" nmap <C-_> 'There is no equivalent mapping for <c-_>.'<cr>
" Hide Terminal - terminal mode maps not possible
" Split Window Below.  :split<cr> doesn't work.
nmap <leader>- <c-w>s
" Split Window Right
nmap <leader><bar> <c-w>v
" Delete Window
nmap <leader>wd <Action>(CloseContent)
" Toggle Maximize
nmap <leader>wm <Action>(ToggleDistractionFreeMode)

" Tabs are treated as saved layouts

" Last Tab
nmap <leader><tab>l <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)
" Close Other Tabs
nmap <leader><tab>o :<cr>
" First Tab
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)
" New Tab
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(StoreNewLayout)
" Next Tab
nmap <leader><tab>] <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)
" Previous Tab
nmap <leader><tab>[ <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)
" Close Tab
nmap <leader><tab>f <Action>(StoreDefaultLayout)<Action>(ChangeToolWindowLayout)

" LSP Keymaps

" Lsp Info
nmap <leader>cc :echo 'There is no equivalent mapping for Lsp Info.'<cr>
" Goto Definition
nmap gd <Action>(GotoDeclaration)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" References
nmap gr <Action>(FindUsages)
" Goto Implementation
nmap gI <Action>(GotoImplementation)
" Goto Type Definition
nmap gy <Action>(GotoTypeDeclaration)
" Goto Declaration
nmap gD <Action>(GotoDeclaration)
" Signature Help
nmap gK <Action>(ParameterInfo)
" Signature Help in Insert Mode
imap <C-k> <C-o><Action>(ParameterInfo)
" Code Action
nmap <leader>ca <Action>(RefactoringMenu)
vmap <leader>ca <Action>(RefactoringMenu)
" Run Codelens
nmap <leader>cc :echo 'There is no equivalent mapping for Run Codelens.'<cr>
" Refresh & Display Codelens
nmap <leader>cC :echo 'There is no equivalent mapping for Refresh & Display Codelens.'<cr>
" Rename File
nmap <leader>cR <Action>(RenameFile)
" Rename
nmap <leader>cr <Action>(RenameElement)
" Source Action
nmap <leader>cA <Action>(ShowIntentionActions)
" Next Reference
nmap ]] <Action>(GotoNextElementUnderCaretUsage)
" Prev Reference
nmap [[ <Action>(GotoPrevElementUnderCaretUsage)
" Next Reference (alternative)
nmap <a-n> <Action>(GotoNextElementUnderCaretUsage)
" Prev Reference (alternative)
nmap <a-p> <Action>(GotoPrevElementUnderCaretUsage)

" Bufferline

" Delete buffers to the left
nmap <leader>bl <Action>(CloseAllToTheLeft)
" Toggle pin
nmap <leader>bp <Action>(PinActiveTabToggle)
" Delete Non-Pinned Buffers
nmap <leader>bP <Action>(CloseAllUnpinnedEditors)
" Delete buffers to the right
nmap <leader>br <Action>(CloseAllToTheRight)

" Neo-tree Keymaps

" Buffer Explorer
nmap <leader>be <Action>(ActivateProjectToolWindow)
" Explorer NeoTree (Root Dir)
nmap <leader>e <Action>(FileStructurePopup)
" Explorer NeoTree (cwd)
nmap <leader>E <Action>(SelectInProjectView)
" Explorer NeoTree (Root Dir) (alternative)
nmap <leader>fe <Action>(ActivateProjectToolWindow)
" Explorer NeoTree (cwd) (alternative)
nmap <leader>fE <Action>(ActivateProjectToolWindow)

" Git Explorer
nmap <leader>ge <Action>(ActivateVersionControlToolWindow)

" Notifications (noice, snacks)

nmap <leader>snd <Action>(ClearAllNotifications)
nmap <leader>un <Action>(ClearAllNotifications)

" Telescope Keymaps

" Find Files (Root Dir)
nmap <leader><space> <Action>(GotoFile)
" Switch Buffer
nmap <leader>, <Action>(Switcher)
" Grep (Root Dir)
nmap <leader>/ <Action>(FindInPath)
" Command History
nmap <leader>: :history<cr>
" Buffers
nmap <leader>fb <Action>(Switcher)
" Find Config File
nmap <leader>fc <Action>(GotoFile)
" Find Files (Root Dir) (alternative)
nmap <leader>ff <Action>(GotoFile)
" Find Files (cwd)
nmap <leader>fF <Action>(GotoFile)
" Find Files (git-files)
nmap <leader>fg <Action>(GotoFile)
" Recent
nmap <leader>fr <Action>(RecentFiles)
" Recent (cwd)
nmap <leader>fR <Action>(RecentFiles)
" Commits
nmap <leader>gc <Action>(Vcs.Show.Log)
" Status
nmap <leader>gs <Action>(Vcs.Show.Log)
" Registers
nmap <leader>s" :registers<cr>
" Auto Commands
nmap <leader>sa :echo 'There is no equivalent mapping.'<cr>
" Buffer
nmap <leader>sb <Action>(Switcher)
" Command History (alternative)
nmap <leader>sc :history<cr>
" Commands
nmap <leader>sC <Action>(GotoAction)
" Document Diagnostics
nmap <leader>sd <Action>(ActivateProblemsViewToolWindow)
" Workspace Diagnostics
nmap <leader>sD <Action>(ActivateProblemsViewToolWindow)
" Grep (Root Dir) (alternative)
nmap <leader>sg <Action>(FindInPath)
" Grep (cwd)
nmap <leader>sG <Action>(FindInPath)
" Help Pages
nmap <leader>sh <Action>(HelpTopics)
" Search Highlight Groups
nmap <leader>sH <Action>(HighlightUsagesInFile)
" Jumplist
nmap <leader>sj <Action>(RecentLocations)
" Key Maps
nmap <leader>sk :map<cr>
" Location List
nmap <leader>sl <Action>(ActivateProblemsViewToolWindow)
" Jump to Mark
nmap <leader>sm :marks<cr>
" Man Pages
nmap <leader>sM <Action>(ShowDocumentation)
" Options
nmap <leader>so <Action>(ShowSettings)
" Quickfix List
nmap <leader>sq <Action>(ActivateProblemsViewToolWindow)
" Resume
nmap <leader>sR :echo 'Not yet implmented.'<cr>
" Goto Symbol
nmap <leader>ss <Action>(GotoSymbol)
" Goto Symbol (Workspace)
nmap <leader>sS <Action>(GotoSymbol)
" Word (Root Dir)
nmap <leader>sw mzviw<Action>(FindInPath)<esc>`z
" Word (cwd)
nmap <leader>sW mzviw<Action>(FindInPath)<esc>`z
" Selection (Root Dir)
vmap <leader>sw <Action>(FindInPath)
" Selection (cwd)
vmap <leader>sW <Action>(FindInPath)
" Colorscheme with Preview
nmap <leader>uC <Action>(QuickChangeScheme)


" DAP Keymaps

" Run with Args
nmap <leader>da <Action>(ChooseRunConfiguration)
" Toggle Breakpoint
nmap <leader>db <Action>(ToggleLineBreakpoint)
" Breakpoint Condition
nmap <leader>dB <Action>(AddConditionalBreakpoint)
" Continue
nmap <leader>dc <Action>(Resume)
" Run to Cursor
nmap <leader>dC <Action>(ForceRunToCursor)
" Go to Line (No Execute)
nmap <leader>dg :echo 'Not yet implemented.'<cr>
" Step Into
nmap <leader>di <Action>(StepInto)
" Down
nmap <leader>dj <Action>(GotoNextError)
" Up
nmap <leader>dk <Action>(GotoPreviousError)
" Run Last
nmap <leader>dl <Action>(Debug)
" Step Out
nmap <leader>do <Action>(StepOut)
" Step Over
nmap <leader>dO <Action>(StepOver)
" Pause
nmap <leader>dp <Action>(Pause)
" Toggle REPL
nmap <leader>dr <Action>(JShell.Console)
" Session
nmap <leader>ds :echo 'Not yet implmented.'<cr>
" Terminate
nmap <leader>dt <Action>(Stop)
" Widgets
nmap <leader>dw :echo 'There is no equivalent mapping for Widgets.'<cr>

" Todo-comments Keymaps

" Todo
nmap <leader>st <Action>(ActivateTODOToolWindow)
" Todo/Fix/Fixme
nmap <leader>sT <Action>(ActivateTODOToolWindow)
" Todo (Trouble)
nmap <leader>xt <Action>(ActivateTODOToolWindow)
" Todo/Fix/Fixme (Trouble)
nmap <leader>xT <Action>(ActivateTODOToolWindow)
" Previous Todo Comment
nmap [t ?\(TODO\|FIX\|HACK\|WARN\|PERF\|NOTE\|TEST\):<cr>
" Next Todo Comment
nmap ]t /\(TODO\|FIX\|HACK\|WARN\|PERF\|NOTE\|TEST\):<cr>

" DAP UI Keymaps

" Eval
nmap <leader>de <Action>(EvaluateExpression)
vmap <leader>de <Action>(EvaluateExpression)
" Dap UI
nmap <leader>du <Action>(ActivateDebugToolWindow)

" Neotest Keymaps

" Run Last
nmap <leader>tl <Action>(Run)
" Show Output
nmap <leader>to <Action>(ActivateRunToolWindow)
" Toggle Output Panel
nmap <leader>tO <Action>(ActivateRunToolWindow)
" Run Nearest
nmap <leader>tr <Action>(RunClass)
" Toggle Summary
nmap <leader>ts :echo 'Not yet implmented.'<cr>
" Stop
nmap <leader>tS <Action>(Stop)
" Run File
nmap <leader>tt <Action>(RunClass)
" Run All Test Files
nmap <leader>tT :echo 'Not yet implmented.'<cr>
" Toggle Watch
nmap <leader>tw :echo 'Not yet implmented.'<cr>

" nvim-dap
" Debug Nearest
nmap <leader>td <Action>(ChooseDebugConfiguration)

" Neovim mappings
" https://neovim.io/doc/user/vim_diff.html#_default-mappings

nnoremap Y y$
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
" Q isn't exactly the same.
nnoremap Q @@
" There are several more Neovim mappings that need to be ported.


"" WhichKey Descriptions
"" ========================================================

let g:WhichKeyDesc_leader = "<leader> Leader"

" General/Utility
let g:WhichKeyDesc_buffer_switch = "<leader>bb Switch Buffer"
let g:WhichKeyDesc_buffer_switch_alt = "<leader>` Switch Buffer"
let g:WhichKeyDesc_buffer_delete = "<leader>bd Delete Buffer"
let g:WhichKeyDesc_buffer_delete_window = "<leader>bD Delete Buffer & Window"
let g:WhichKeyDesc_buffer_delete_other = "<leader>bo Delete Other Buffers"
let g:WhichKeyDesc_clear_highlight = "<leader>ur Clear Highlight"
let g:WhichKeyDesc_keyword_help = "<leader>K Keyword Help"
let g:WhichKeyDesc_lazy_plugins = "<leader>l Lazy Plugins"
let g:WhichKeyDesc_file_new = "<leader>fn New File"
let g:WhichKeyDesc_quit = "<leader>qq Quit All"
let g:WhichKeyDesc_lazyvim_changelog = "<leader>L LazyVim Changelog"

" Code/Format/Diagnostics
let g:WhichKeyDesc_code_format = "<leader>cf Format"
let g:WhichKeyDesc_code_diagnostics = "<leader>cd Line Diagnostics"
let g:WhichKeyDesc_list_location = "<leader>xl Location List"
let g:WhichKeyDesc_list_quickfix = "<leader>xq Quickfix List"

" Toggles
let g:WhichKeyDesc_toggle_autoformat_global = "<leader>ub Toggle Auto Format (Global - N/A)"
let g:WhichKeyDesc_toggle_autoformat_buffer = "<leader>uB Toggle Auto Format (Buffer - N/A)"
let g:WhichKeyDesc_toggle_spell = "<leader>us Toggle Spelling"
let g:WhichKeyDesc_toggle_wrap = "<leader>uw Toggle Wrap"
let g:WhichKeyDesc_toggle_relative_number = "<leader>uL Toggle Relative Number"
let g:WhichKeyDesc_toggle_diagnostics = "<leader>ud Toggle Diagnostics"
let g:WhichKeyDesc_toggle_line_numbers = "<leader>ul Toggle Line Numbers"
let g:WhichKeyDesc_toggle_conceal = "<leader>uc Toggle Conceallevel (N/A)"
let g:WhichKeyDesc_toggle_treesitter = "<leader>uT Toggle Treesitter Highlight (N/A)"
let g:WhichKeyDesc_toggle_background = "<leader>ub Toggle Background/Theme"
let g:WhichKeyDesc_toggle_inlay_hints = "<leader>uh Toggle Inlay Hints"
let g:WhichKeyDesc_toggle_maximize = "<leader>wm Toggle Maximize/Distraction Free"

" Git
let g:WhichKeyDesc_git_commit_tool = "<leader>gg Lazygit (Root Dir)"
let g:WhichKeyDesc_git_commit_tool_cwd = "<leader>gG Lazygit (cwd)"
let g:WhichKeyDesc_git_blame = "<leader>gb Git Blame Line"
let g:WhichKeyDesc_git_browse = "<leader>gB Git Browse Log"
let g:WhichKeyDesc_git_file_history = "<leader>gf Git File History"
let g:WhichKeyDesc_git_log = "<leader>gl Git Log"
let g:WhichKeyDesc_git_log_cwd = "<leader>gL Git Log (cwd)"
let g:WhichKeyDesc_git_explorer = "<leader>ge Git Explorer"
let g:WhichKeyDesc_git_commits = "<leader>gc Commits (Telescope)"
let g:WhichKeyDesc_git_status = "<leader>gs Status (Telescope)"

" Inspect/UI
let g:WhichKeyDesc_ui_inspect_pos = "<leader>ui Inspect Pos (Structure)"
let g:WhichKeyDesc_ui_inspect_tree = "<leader>uI Inspect Tree (Structure)"

" Terminal
let g:WhichKeyDesc_terminal_root = "<leader>ft Terminal (Root Dir)"
let g:WhichKeyDesc_terminal_cwd = "<leader>fT Terminal (cwd)"

" Window Management
let g:WhichKeyDesc_window_split_below = "<leader>- Split Window Below"
let g:WhichKeyDesc_window_split_right = "<leader><bar> Split Window Right"
let g:WhichKeyDesc_window_delete = "<leader>wd Delete Window"

" Tabs (Layouts)
let g:WhichKeyDesc_tab_last = "<leader><tab>l Last Tab Layout"
let g:WhichKeyDesc_tab_close_other = "<leader><tab>o Close Other Tab Layouts"
let g:WhichKeyDesc_tab_first = "<leader><tab>f First Tab Layout"
let g:WhichKeyDesc_tab_new = "<leader><tab>f New Tab Layout"
let g:WhichKeyDesc_tab_next = "<leader><tab>] Next Tab Layout"
let g:WhichKeyDesc_tab_prev = "<leader><tab>[ Previous Tab Layout"
let g:WhichKeyDesc_tab_close = "<leader><tab>f Close Tab Layout"

" LSP
let g:WhichKeyDesc_lsp_info = "<leader>cc Lsp Info (N/A)"
let g:WhichKeyDesc_lsp_code_action = "<leader>ca Code Action"
let g:WhichKeyDesc_lsp_codelens_run = "<leader>cc Run Codelens (N/A)"
let g:WhichKeyDesc_lsp_codelens_refresh = "<leader>cC Refresh Codelens (N/A)"
let g:WhichKeyDesc_lsp_rename_file = "<leader>cR Rename File"
let g:WhichKeyDesc_lsp_rename_symbol = "<leader>cr Rename Symbol"
let g:WhichKeyDesc_lsp_source_action = "<leader>cA Source Action / Intentions"

" Bufferline
let g:WhichKeyDesc_bufferline_close_left = "<leader>bl Close Buffers Left"
let g:WhichKeyDesc_bufferline_pin = "<leader>bp Toggle Pin"
let g:WhichKeyDesc_bufferline_close_unpinned = "<leader>bP Close Unpinned Buffers"
let g:WhichKeyDesc_bufferline_close_right = "<leader>br Close Buffers Right"

" Explorer (Project View / Neo-tree)
let g:WhichKeyDesc_explorer_buffer = "<leader>be Buffer Explorer"
let g:WhichKeyDesc_explorer_root = "<leader>e Explorer (Root Dir)"
let g:WhichKeyDesc_explorer_cwd = "<leader>E Explorer (cwd)"
let g:WhichKeyDesc_explorer_alt_root = "<leader>fe Explorer Alt (Root Dir)"
let g:WhichKeyDesc_explorer_alt_cwd = "<leader>fE Explorer Alt (cwd)"

" Notifications
let g:WhichKeyDesc_notifications_dismiss = "<leader>snd Dismiss Notifications"
let g:WhichKeyDesc_notifications_alt_dismiss = "<leader>un Dismiss Notifications"

" Telescope / Search
let g:WhichKeyDesc_telescope_find_files = "<leader><space> Find Files"
let g:WhichKeyDesc_telescope_switcher = "<leader>, Switch Buffer"
let g:WhichKeyDesc_telescope_grep = "<leader>/ Grep (Root Dir)"
let g:WhichKeyDesc_telescope_command_history = "<leader>: Command History"
let g:WhichKeyDesc_telescope_buffers = "<leader>fb Buffers"
let g:WhichKeyDesc_telescope_config_files = "<leader>fc Find Config File"
let g:WhichKeyDesc_telescope_find_files_alt = "<leader>ff Find Files (Root Dir)"
let g:WhichKeyDesc_telescope_find_files_cwd = "<leader>fF Find Files (cwd)"
let g:WhichKeyDesc_telescope_git_files = "<leader>fg Find Files (git-files)"
let g:WhichKeyDesc_telescope_recent = "<leader>fr Recent Files"
let g:WhichKeyDesc_telescope_recent_cwd = "<leader>fR Recent Files (cwd)"
let g:WhichKeyDesc_telescope_registers = "<leader>s\" Registers"
let g:WhichKeyDesc_telescope_autocmds = "<leader>sa Auto Commands (N/A)"
let g:WhichKeyDesc_telescope_buffers_alt = "<leader>sb Buffers"
let g:WhichKeyDesc_telescope_command_history_alt = "<leader>sc Command History"
let g:WhichKeyDesc_telescope_commands = "<leader>sC Commands (Actions)"
let g:WhichKeyDesc_telescope_diagnostics_doc = "<leader>sd Document Diagnostics"
let g:WhichKeyDesc_telescope_diagnostics_workspace = "<leader>sD Workspace Diagnostics"
let g:WhichKeyDesc_telescope_grep_alt = "<leader>sg Grep (Root Dir)"
let g:WhichKeyDesc_telescope_grep_cwd = "<leader>sG Grep (cwd)"
let g:WhichKeyDesc_telescope_help = "<leader>sh Help Pages"
let g:WhichKeyDesc_telescope_highlights = "<leader>sH Highlight Groups"
let g:WhichKeyDesc_telescope_jumplist = "<leader>sj Jumplist"
let g:WhichKeyDesc_telescope_keymaps = "<leader>sk Key Maps"
let g:WhichKeyDesc_telescope_locations = "<leader>sl Location List"
let g:WhichKeyDesc_telescope_marks = "<leader>sm Marks"
let g:WhichKeyDesc_telescope_manpages = "<leader>sM Man Pages (Documentation)"
let g:WhichKeyDesc_telescope_options = "<leader>so Options (Settings)"
let g:WhichKeyDesc_telescope_quickfix = "<leader>sq Quickfix List"
let g:WhichKeyDesc_telescope_resume = "<leader>sR Resume (N/A)"
let g:WhichKeyDesc_telescope_symbols = "<leader>ss Goto Symbol"
let g:WhichKeyDesc_telescope_symbols_workspace = "<leader>sS Goto Symbol (Workspace)"
let g:WhichKeyDesc_telescope_word_root = "<leader>sw Word (Root Dir)"
let g:WhichKeyDesc_telescope_word_cwd = "<leader>sW Word (cwd)"
let g:WhichKeyDesc_telescope_colorscheme = "<leader>uC Colorscheme Preview"

" DAP (Debugger)
let g:WhichKeyDesc_dap_run_args = "<leader>da Run with Args"
let g:WhichKeyDesc_dap_breakpoint_toggle = "<leader>db Toggle Breakpoint"
let g:WhichKeyDesc_dap_breakpoint_condition = "<leader>dB Breakpoint Condition"
let g:WhichKeyDesc_dap_continue = "<leader>dc Continue"
let g:WhichKeyDesc_dap_run_to_cursor = "<leader>dC Run to Cursor"
let g:WhichKeyDesc_dap_goto_line = "<leader>dg Go to Line (N/A)"
let g:WhichKeyDesc_dap_step_into = "<leader>di Step Into"
let g:WhichKeyDesc_dap_down = "<leader>dj Down (Stack)"
let g:WhichKeyDesc_dap_up = "<leader>dk Up (Stack)"
let g:WhichKeyDesc_dap_run_last = "<leader>dl Run Last"
let g:WhichKeyDesc_dap_step_out = "<leader>do Step Out"
let g:WhichKeyDesc_dap_step_over = "<leader>dO Step Over"
let g:WhichKeyDesc_dap_pause = "<leader>dp Pause"
let g:WhichKeyDesc_dap_repl = "<leader>dr Toggle REPL"
let g:WhichKeyDesc_dap_session = "<leader>ds Session (N/A)"
let g:WhichKeyDesc_dap_terminate = "<leader>dt Terminate"
let g:WhichKeyDesc_dap_widgets = "<leader>dw Widgets (N/A)"
let g:WhichKeyDesc_dap_eval = "<leader>de Eval"
let g:WhichKeyDesc_dap_ui = "<leader>du Dap UI"

" Todo Comments
let g:WhichKeyDesc_todo_list = "<leader>st Todo List"
let g:WhichKeyDesc_todo_list_all = "<leader>sT Todo/Fix/Fixme List"
let g:WhichKeyDesc_todo_trouble = "<leader>xt Todo (Trouble)"
let g:WhichKeyDesc_todo_trouble_all = "<leader>xT Todo/Fix/Fixme (Trouble)"

" Neotest (Testing)
let g:WhichKeyDesc_test_run_last = "<leader>tl Run Last Test"
let g:WhichKeyDesc_test_output = "<leader>to Show Test Output"
let g:WhichKeyDesc_test_output_toggle = "<leader>tO Toggle Test Output Panel"
let g:WhichKeyDesc_test_run_nearest = "<leader>tr Run Nearest Test"
let g:WhichKeyDesc_test_summary_toggle = "<leader>ts Toggle Test Summary (N/A)"
let g:WhichKeyDesc_test_stop = "<leader>tS Stop Test Runner"
let g:WhichKeyDesc_test_run_file = "<leader>tt Run Test File"
let g:WhichKeyDesc_test_run_all = "<leader>tT Run All Test Files (N/A)"
let g:WhichKeyDesc_test_watch_toggle = "<leader>tw Toggle Test Watch (N/A)"
let g:WhichKeyDesc_test_debug_nearest = "<leader>td Debug Nearest Test"

" --- Additions ---
" Groupings
let g:WhichKeyDesc_f = "<leader>f +Find/File/Terminal"
let g:WhichKeyDesc_g = "<leader>g +Git/Comment/Surround"
let g:WhichKeyDesc_s = "<leader>s +Search/Symbol/Select"
let g:WhichKeyDesc_c = "<leader>c +Code/LSP/Format"
let g:WhichKeyDesc_u = "<leader>u +UI/Utility/Toggle"
let g:WhichKeyDesc_d = "<leader>d +Debug/DAP"
let g:WhichKeyDesc_t = "<leader>t +Test/Todo"
let g:WhichKeyDesc_x = "<leader>x +Trouble/Lists"
let g:WhichKeyDesc_b = "<leader>b +Buffer/Bufferline"
let g:WhichKeyDesc_w = "<leader>w +Window"
let g:WhichKeyDesc_tab = "<leader><tab> +Tabs/Layouts"
let g:WhichKeyDesc_gc = "gc +Comment"
let g:WhichKeyDesc_gs = "gs +Surround"

" Specific Mappings
let g:WhichKeyDesc_gsd = "gsd Delete Surround"

" Tab Corrections (assuming which-key needs _tab_ prefix)
let g:WhichKeyDesc__tab_l = "<leader><tab>l Last Tab Layout"
let g:WhichKeyDesc__tab_o = "<leader><tab>o Close Other Tab Layouts"
let g:WhichKeyDesc__tab_f = "<leader><tab>f New Tab Layout" " Updated description to match StoreNewLayout action"
" Removed __tab_n and __tab_c as they don't have dedicated mappings
let g:WhichKeyDesc__tab_bracketright = "<leader><tab>] Next Tab Layout" " ] -> bracketright"
let g:WhichKeyDesc__tab_bracketleft = "<leader><tab>[ Previous Tab Layout" " [ -> bracketleft"

" --- Additions Part 2 ---
" Bracket Mappings
let g:WhichKeyDesc_bracketleft_b = "[b Prev Buffer"
let g:WhichKeyDesc_bracketright_b = "]b Next Buffer"
let g:WhichKeyDesc_bracketleft_q = "[q Previous Quickfix"
let g:WhichKeyDesc_bracketright_q = "]q Next Quickfix"
let g:WhichKeyDesc_bracketleft_d = "[d Prev Diagnostic"
let g:WhichKeyDesc_bracketright_d = "]d Next Diagnostic"
let g:WhichKeyDesc_bracketleft_e = "[e Prev Error"
let g:WhichKeyDesc_bracketright_e = "]e Next Error"
let g:WhichKeyDesc_bracketleft_w = "[w Prev Warning"
let g:WhichKeyDesc_bracketright_w = "]w Next Warning"
let g:WhichKeyDesc_bracketleft_bracketleft = "[[ Prev Reference"
let g:WhichKeyDesc_bracketright_bracketright = "]] Next Reference"
let g:WhichKeyDesc_bracketleft_t = "[t Previous Todo Comment"
let g:WhichKeyDesc_bracketright_t = "]t Next Todo Comment"

" --- Additions Part 3 (Specific Mappings missed previously) ---
let g:WhichKeyDesc_hyphen = "<leader>- Split Window Below" " which-key uses _ for special chars like -"
let g:WhichKeyDesc_bar = "<leader>| Split Window Right" " which-key uses _ for special chars like |"
let g:WhichKeyDesc_gco = "gco Comment Below"
let g:WhichKeyDesc_gcO = "gcO Comment Above"
let g:WhichKeyDesc_gsa = "gsa Add Surround"
let g:WhichKeyDesc_gsr = "gsr Replace Surround"
" gsd was already present
