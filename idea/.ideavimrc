" "" TODO:
" - Fix whichkey description for leacerx
" - Add command for safe delete
" - Update based on git repo for lazyvim: https://github.com/cufarvid/lazy-idea

" Aim is to have this file as a single source of truth for all keybindings

" List of available idea actions: https://gist.github.com/zchee/9c78f91cc5ad771c1f5d
" Can also turn on actions in the global searh menu with: track action IDs

"" Base Settings
"" ========================================================

set scrolloff=10 " Number of lines to leave on screen before scrolling
" set linenumber " TODO: Maybe revert to set nu?
set nu " Show line numbers
set showmode " Status bar
set showcmd "
set visualbell " Stops the annoying beeping for invalid input

" Searching settings
set smartcase " Use case sensitive searching if there is a capital letter in the search
set ignorecase " Case insensitive searching by default
set incsearch " Start searching as you type
set hlsearch " Highlight search results
set gdefault " Makes the :s command global by default

" Ideavim settings
set ideajoin " Join lines in the editor
set ideamarks " Use idea bookmarks instead of vim marks
" set idearefactormode=normal " Use normal mode for refactoring

" Use clipboard for yanking+pasting, avoid using clipboard when deleting.
set clipboard=ideaput,unnamed
" Deleting goes to null register
nnoremap d ""d
nnoremap dd ""dd
vnoremap d ""d
nnoremap x ""x
vnoremap x ""x
nnoremap C ""C
vnoremap C ""C
nnoremap c ""c
vnoremap c ""c

" Unbind space for leader
" map <space> <nop> - TODO: This was breaking
let mapleader = " "

"" Plugin Settings
"" ========================================================
" Plugins bundled with ideavim
set surround " Use cs and ys to add quotes to surrounding text
set highlightedyank " Highlight yanked text

" Plugins to install separately
Plug 'preservim/nerdtree'
set nerdtree
Plug 'dbakker/vim-paragraph-motion' " { and } also select lines with white space only

" Easymotion settings
" Will need to install these two plugins separately
" Install IdeaVim-EasyMotion and AceJump plugins.
Plug 'easymotion/vim-easymotion'
set easymotion
set notimeout



"" Key mappings
"" ========================================================
" Better HJKL
map H ^
map L $
map J 5j
map K 5k

" Tab navigation - Alt n/p
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>

" Pane navigation - Ctrl hjkl
" Can still use normal ctrl-w hjkl
noremap <C-h> <C-W>h
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-l> <C-W>l

" Jump between methods
" n = normal mode , nore=non-recursive, won't trigger other mappings
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)

" Bookmark
nmap mm <Action>(ToggleBookmark)
nmap ms <Action>(ShowBookmarks)
nmap me <Action>(EditBookmark)

"" Leader commands
"" ========================================================
" Code commands
nmap <leader>cd <Action>(SafeDelete)
nmap <leader>co <Action>(OptimizeImports)
nmap <leader>ci <Action>(QuickImplementations)
nmap <leader>cq <Action>(QuickJavaDoc)
" Seek around with easymotion
nmap s <Plug>(easymotion-s)

" Folding
map <leader>zC :action CollapseAllRegions<CR>
map <leader>zE :action ExpandAllRegions<CR>
map <leader>zc :action CollapseRegionRecursively<CR>
map <leader>ze :action ExpandRegionRecursively<CR>
map <leader>zz :action ExpandCollapseToggleAction<CR>

" Window splits
" Intellij calls toolbars "Windows" and code windows "Splits"
map <leader>ww <Action>(HideAllWindows)
map <leader>wv <Action>(SplitVertically)
map <leader>ws <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)
nmap <leader>wd <Action>(CloseContent)
nmap <leader>wa <Action>(CloseAllEditors)
nmap <leader>wo <Action>(CloseAllEditorsButActive)
map <leader>w= <Action>(tabshifter.Actions.EqualSizeSplit)

map <C-Left> <Action>(TabShiftActions.StretchLeft)
map <C-Right> <Action>(TabShiftActions.StretchRight)
map <C-Down> <Action>(TabShiftActions.StretchDown)
map <C-Up> <Action>(TabShiftActions.StretchUp)
" Note: With the TabShifter plugin, shift+alt [ or ] will stretch the splitter window left or right

" Display options
map <leader>dd <action>(HideAllWindows)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)
map <leader>di <action>(ToggleDistractionFreeMode)

" Tool windows
map <leader>th <action>(ResizeToolWindowLeft)
map <leader>tl <action>(ResizeToolWindowRight)
map <leader>ti <action>(JumpToLastWindow)
" Open NERDTree (use q or esc to exit)
map <leader>e :NERDTreeFocus<CR>
map <leader>tc :NERDTreeClose<CR>
" s - Open file in vertical split
" o - Open directory
" O - Recursively open directories
" x - Close parent directory
" X - Recursively close all children
" Navigation
" p - Go to parent directory
" P - Go to root directory
" K - Go to first file in directory
" J - Go to last file in directory
" m - Show menu
" n - Create a new file
" N - Create a new directory

" Actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)

" File navigation
map <leader><leader> <action>(RecentFiles)
map <leader>ff <action>(GotoFile)
map <leader>fr <action>(RecentFiles)
map <leader>fa <action>(FindInPath)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(FileStructurePopup)

" Show the method signature
map <leader>q <action>(QuickJavaDoc)

" Go to code
nmap gd <Action>(GotoDeclaration)
nmap gg <Action>(GotoImplementation)
nmap gy <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gr <Action>(ShowUsages)
nmap gt <Action>(GotoTest)
nmap gf <Action>(Back)
nmap gb <Action>(Forward)
nmap gs <Action>(GotoSuperMethod)

" Git windows
map <leader>gc <Action>(CheckinProject)
map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gr <Action>(Git.Branches)

" Errors
map <leader>xn <Action>(GotoNextError)
map <leader>xp <Action>(GotoPreviousError)

nmap <leader>mt <Action>(MainMenu)
nmap <leader>ma <Action>(AnalyzeMenu)
nmap <leader>mb <Action>(BuildMenu)
nmap <leader>mc <Action>(CodeMenu)
nmap <leader>mf <Action>(FindMenuGroup)
nmap <leader>mg <Action>(GoToMenu)
nmap <leader>ms <Action>(ScopeViewPopupMenu)
nmap <leader>me <Action>(EditorTabPopupMenu)
nmap <leader>mm <Action>(ToolWindowsGroup)

let g:WhichKeyDesc_menu = "<leader>m Menu"
let g:WhichKeyDesc_menu = "<leader>mt Top Bar Menu"
let g:WhichKeyDesc_menu_analyze = "<leader>ma Analyze"
let g:WhichKeyDesc_menu_build = "<leader>mb Build"
let g:WhichKeyDesc_menu_code = "<leader>mc Code"
let g:WhichKeyDesc_menu_find = "<leader>mf Find"
let g:WhichKeyDesc_menu_goto = "<leader>mg Go to"
let g:WhichKeyDesc_menu_scope = "<leader>ms Scope"
let g:WhichKeyDesc_menu_editor = "<leader>me Editor"
let g:WhichKeyDesc_menu_tool = "<leader>mm Tool"

" run
nmap <leader>rc <Action>(ContextRun)
nmap <leader>rx <Action>(chooseRunConfiguration)
nmap <leader>rr <Action>(Run)
nmap <leader>rt <Action>(RunTests)
nmap <leader>rs <Action>(Stop)
nmap <leader>rg <Action>(ContextDebug)
nmap <leader>rd <Action>(Debug)
nmap <leader>rv <Action>(IdeaVim.ReloadVimRc.reload)

" Refactoring
map <leader>rfn <Action>(RenameElement)
map <leader>rfm <Action>(ExtractMethod)
map <leader>rfv <Action>(IntroduceVariable)
map <leader>rff <Action>(IntroduceField)
map <leader>rfs <Action>(ChangeSignature)
map <leader>rfr <Action>(Refactorings.QuickListPopupAction)

" Breakpoint
nmap <leader>bb <Action>(ToggleLineBreakpoint)
nmap <leader>be <Action>(EditBreakpoint)
nmap <leader>bv <Action>(ViewBreakpoints)

"" Which Key Settings
"" ========================================================
set which-key
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

" No leader key
let g:WhichKeyDesc_bookmarks = "m Bookmarks"
let g:WhichKeyDesc_bookmarks_toggle = "mm Toggle bookmark"
let g:WhichKeyDesc_bookmarks_show = "ms Show bookmarks"
let g:WhichKeyDesc_bookmarks_edit = "me Edit bookmark"

" Leader key
let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_easymotion = "s Jump with Easymotion"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

let g:WhichKeyDesc_code = "<leader>c Code menu"
let g:WhichKeyDesc_code_delete = "<leader>cd Safe delete"
let g:WhichKeyDesc_code_optimize = "<leader>co Optimize imports"
let g:WhichKeyDesc_code_implementation = "<leader>ci Show Implementation (alt+space)"
let g:WhichKeyDesc_code_documentation = "<leader>cq Show method documentation"

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_region = "<leader>zc Collapse region"
let g:WhichKeyDesc_fold_all_region = "<leader>zC Collapse all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zE Expand all regions"
let g:WhichKeyDesc_unfold_region = "<leader>ze Expand region"
let g:WhichKeyDesc_fold_toggle = "<leader>zz Toggle expand/collapse"

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_hide = "<leader>ww Toggle all tool windows"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>ws Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_close_content = "<leader>wd Close Current Tab"
let g:WhichKeyDesc_close_all = "<leader>wa Close All Tabs"
let g:WhichKeyDesc_close_all_but_active = "<leader>wo Close All Tabs But Active"
let g:WhichKeyDesc_window_equals = "<leader>w= Equalize window sizes"

let g:WhichKeyDesc_window_adjust_left = "<C-Left> Adjust width left (shift+alt+[)"
let g:WhichKeyDesc_window_adjust_right = "<C-Right> Adjust width right (shift+alt+])"

let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_hide_all_windows = "<leader>dd Hide all windows"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"
let g:WhichKeyDesc_distraction_free = "<leader>di Toggle distraction free mode"

let g:WhichKeyDesc_tool_window = "<leader>t Tool window"
let g:WhichKeyDesc_nerdtree = "<leader>e NERDTree Explorer"
let g:WhichKeyDesc_nerdtree_close = "<leader>tc Close NERDTree"
let g:WhichKeyDesc_resize_tool_window_left = "<leader>th Resize tool window left (ctrl+alt+left)"
let g:WhichKeyDesc_resize_tool_window_right = "<leader>tl Resize tool window right (ctrl+alt+right)"
let g:WhichKeyDesc_jump_to_last_too_window = "<leader>ti Jump to last tool window (F12)"

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fa Search all files"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations in file"
let g:WhichKeyDesc_file_structure_popup = "<leader>fs Show file structure"

let g:WhichKeyDesc_show_quick_signature = "<leader>q Show quick method doc"



let g:WhichKeyDesc_run_prefix = "<leader>r Run + Refactor"
let g:WhichKeyDesc_run_context = "<leader>rc Run context"
let g:WhichKeyDesc_choose = "<leader>rx Choose run config"
let g:WhichKeyDesc_rerun = "<leader>rr Rerun"
let g:WhichKeyDesc_tests = "<leader>rt Run tests"
let g:WhichKeyDesc_stop = "<leader>rs Stop"
let g:WhichKeyDesc_debug_context = "<leader>rg Debug context"
let g:WhichKeyDesc_debug = "<leader>rd Debug"
let g:WhichKeyDesc_reload_vimrc = "<leader>rv Reload ideavimrc"

let g:WhichKeyDesc_refactoring = "<leader>rf  Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rfn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rfm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rfv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rff Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rfs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rfr Open refactorings list"

let g:WhichKeyDesc_goto = "g GOTO"
let g:WhichKeyDesc_goto_declaration = "gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "gy Go to Type Declaration"
let g:WhichKeyDesc_goto_implementation = "gi Go to Implementation"
let g:WhichKeyDesc_goto_impl = "gg Go to Implementation"
let g:WhichKeyDesc_goto_usages = "gr Go to Usages"
let g:WhichKeyDesc_goto_test = "gt Go to Test"
let g:WhichKeyDesc_goto_back = "gb Go Back"
let g:WhichKeyDesc_goto_forward = "gf Go Forward"
let g:WhichKeyDesc_goto_super = "gs Go to Super Method"

let g:WhichKeyDesc_git = "<leader>g Git"
let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit sidebar"
let g:WhichKeyDesc_git_status = "<leader>gs Open Git status dialog"
let g:WhichKeyDesc_git_branches = "<leader>gr Open Git branches list"

let g:WhichKeyDesc_close = "<leader>x Diagnostics"
let g:WhichKeyDesc_errors_next = "<leader>xn Go to next error"
let g:WhichKeyDesc_errors_prev = "<leader>xp Go to previous error"

let g:WhichKeyDesc_Menu = "<leader>m Menu"

let g:WhichKeyDesc_run = "<Space>r Run + Refactor"

let g:WhichKeyDesc_breakpoints = "<leader>b Breakpoint"