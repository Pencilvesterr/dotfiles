"" TODO:
" - Keep copying useful imports form ~/.ideavimrc.bck
" - Fix whichkey description for leacerx
" - leaderG is overloaded

" List of available idea actions: https://gist.github.com/zchee/9c78f91cc5ad771c1f5d

"" Base Settings
"" ========================================================

set scrolloff=10 " Number of lines to leave on screen before scrolling
" set linenumber " TODO: Maybe revert to set nu?
set nu " Show line numbers
set showmode " Status bar
set showcmd "
set visualbell " Stops the annoying beeping for invalid input

" Searching settings
set smartcase " Use case sensitive searching if there is a capital letter in the search
set ignorecase " Case insensitive searching by default
set incsearch " Start searching as you type
set hlsearch " Highlight search results
set gdefault " Makes the :s command global by default

" Ideavim settings
set ideajoin " Join lines in the editor
set ideamarks " Use idea bookmarks instead of vim marks
" set idearefactormode=normal " Use normal mode for refactoring

set clipboard=ideaput  " Avoid using clipboard when deleting

let mapleader = " "


"" Plugin Settings
"" ========================================================
" Plugins bundled with ideavim
set surround " Use cs and ys to add quotes to surrounding text
set highlightedyank " Highlight yanked text

" Plugins to install separately
Plug 'justinmk/vim-sneak'
set sneak " Use s to jump to two characters search
Plug 'preservim/nerdtree'
set nerdtree
Plug 'dbakker/vim-paragraph-motion' " { and } also select lines with white space only

" Easymotion settings
" Will need to install these two plugins separately
" Install IdeaVim-EasyMotion and AceJump plugins.
Plug 'easymotion/vim-easymotion'
set easymotion
set notimeout

" Which-key settings
set which-key
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_leader_t = "<leader>t NERDTree Explorer"

let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

let g:WhichKeyDesc_comment = "<leader>c Comment line"

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_region = "<leader>zc Collapse region"
let g:WhichKeyDesc_fold_all_region = "<leader>zC Collapse all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zE Expand all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zE Expand all regions"
let g:WhichKeyDesc_fold_toggle = "<leader>zz Toggle expand/collapse"

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"


let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

let g:WhichKey_close = "<leader>x Close menu"
let g:WhichKey_close_content = "<leader>xx Close Content"
let g:WhichKey_close_all = "<leader>xa Close All Editors"
let g:WhichKey_close_all_but_active = "<leader>xo Close All Editors But Active"

let g:WhichKeyDesc_run = "<Space>r Run + Refactor"
let g:WhichKeyDesc_refactoring = "<leader>rf  Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rfn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rfm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rfv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rff Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rfs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rfr Open refactorings list"

let g:WhichKeyDesc_goto = "<leader>g GOTO + Git"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Declaration"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit sidebar"
let g:WhichKeyDesc_git_status = "<leader>gs Open Git status dialog"
let g:WhichKeyDesc_git_branches = "<leader>gb Open Git branches list"

let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

let g:WhichKeyDesc_Menu = "<leader>m Menu"
" TODO: Menu items

let g:WhichKeyDesc_run = "<Space>r Run + Refactor"

"" Key mappings
"" ========================================================
" Better HJKL
map H ^
map L $
map J }
map K {

" Tab navigation - Alt n/p
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>

" Pane navigation - Ctrl hjkl
nmap <C-k> <C-w>k
nmap <C-j> <C-w>j
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

" Jump between methods
nnoremap [[ <Action>(MethodUp)
nnoremap ]] <Action>(MethodDown)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Popup navigation
inoremap <C-j> <Action>(PopupMenu-selectNext)
inoremap <C-k> <Action>(PopupMenu-selectPrev)

"" Leader commands
"" ========================================================

" Comment lines
map <leader>c <action>(CommentByLineComment)

" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)

" Open NERDTree (use q to exit)
map <leader>t :NERDTreeToggle<CR>

" Folding
map <leader>zC :action CollapseAllRegions<CR>
map <leader>zE :action ExpandAllRegions<CR>
map <leader>zc :action CollapseRegionRecursively<CR>
map <leader>ze :action ExpandRegionRecursively<CR>
map <leader>zz :action ExpandCollapseToggleAction<CR>

" Window splits
map <leader>wv <Action>(SplitVertically)
map <leader>ws <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

" Display options
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)

" Actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)

" File navigation
map <leader>ff <action>(GotoFile)
map <leader>fr <action>(RecentFiles)
map <leader>fc <action>(FindInPath)
map <leader><leader> <Action>(RecentFiles)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)

" Close active tab
map <leader>q <action>(CloseContent)

" Closing Content
nmap <leader>xx <Action>(CloseContent)
nmap <leader>xa <Action>(CloseAllEditors)
nmap <leader>xo <Action>(CloseAllEditorsButActive)


" Refactoring
map <leader>rfn <Action>(RenameElement)
map <leader>rfm <Action>(ExtractMethod)
map <leader>rfv <Action>(IntroduceVariable)
map <leader>rff <Action>(IntroduceField)
map <leader>rfs <Action>(ChangeSignature)
map <leader>rfr <Action>(Refactorings.QuickListPopupAction)

" Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)

" Git windows
map <leader>gc <Action>(CheckinProject)
map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)

" Errors
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

" Menu - TODO: Decide if i actually need these
nmap <leader>mm <Action>(MainMenu)
nmap <leader>ma <Action>(AnalyzeMenu)
nmap <leader>mb <Action>(BuildMenu)
nmap <leader>mc <Action>(CodeMenu)
nmap <leader>mf <Action>(FindMenuGroup)
nmap <leader>mg <Action>(GoToMenu)
nmap <leader>ms <Action>(ScopeViewPopupMenu)
nmap <leader>mt <Action>(EditorTabPopupMenu)
nmap <leader>mw <Action>(ToolWindowsGroup)

" run
nmap <leader>rc <Action>(ContextRun)
nmap <leader>rx <Action>(chooseRunConfiguration)
nmap <leader>rr <Action>(Rerun)
nmap <leader>rt <Action>(RunTests)
nmap <leader>rs <Action>(Stop)
nmap <leader>rf <Action>(ContextDebug)
nmap <leader>rd <Action>(Debug)

nmap <leader>bb <Action>(ToggleLineBreakpoint)
nmap <leader>be <Action>(EditBreakpoint)
nmap <leader>bv <Action>(ViewBreakpoints)
